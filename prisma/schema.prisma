generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("PG_DB_URL")
  relationMode = "prisma"
}

enum EventFrequency {
  DAILY
  MONTHLY
  WEEKLY
  YEARLY
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
}

model User {
  id            String    @id @default(uuid())
  username      String    @db.VarChar(50)
  email         String    @unique @db.VarChar(320)
  password      String    @db.VarChar(60)
  verified      Boolean   @default(false)
  loginAttempts Int       @default(0)
  blockedUntil  DateTime?

  userCodeId String   @unique
  userCode   UserCode @relation(fields: [userCodeId], references: [id], onDelete: Cascade)

  userProfileId String      @unique
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  refreshTokenId String?       @unique
  refreshToken   RefreshToken? @relation(fields: [refreshTokenId], references: [id], onDelete: Cascade)

  oauthAccounts UserOAuth[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserCode {
  id         String   @id @default(uuid())
  code       String   @db.VarChar(6)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User?
}

model UserOAuth {
  id       String @id @default(uuid())
  provider String

  email  String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())

  @@unique([provider, email])
  @@index([userId])
}

model UserProfile {
  id              String  @id @default(uuid())
  displayName     String? @db.VarChar(300)
  icon            String? @db.VarChar(2048)
  autobiography   String? @db.VarChar(500)
  backgroundImage String? @db.VarChar(2048)

  user      User?
  chats     UserInChat[]
  interests Interested[]
  comment   Comment[]
  ideas     Idea[]
  viewed    View[]
  liked     Like[]
  links     Link[]
  companies UserCompany[]
  following Follow[]      @relation("UserFollows")
  followers Follow[]      @relation("FollowingUser")
  messages  Message[]
  userSkills           UserSkill[]
  experiences          Experience[]
  projectMemberships   ProjectMember[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Company {
  id   String @id @default(uuid())
  name String

  followers Follow[]      @relation("FollowingCompany")
  members   UserCompany[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserCompany {
  userId    String
  companyId String

  user    UserProfile @relation(fields: [userId], references: [id])
  company Company     @relation(fields: [companyId], references: [id])

  @@id([userId, companyId])
  @@index([companyId])
}

model Follow {
  id String @id @default(uuid())

  followerUserId     String
  followingUserId    String?
  followingCompanyId String?

  followerUser     UserProfile  @relation("UserFollows", fields: [followerUserId], references: [id])
  followingUser    UserProfile? @relation("FollowingUser", fields: [followingUserId], references: [id])
  followingCompany Company?     @relation("FollowingCompany", fields: [followingCompanyId], references: [id])

  created_at DateTime @default(now())

  @@unique([followerUserId, followingUserId])
  @@unique([followerUserId, followingCompanyId])
  @@index([followingUserId])
  @@index([followingCompanyId])
}

model Idea {
  id          String  @id @default(uuid())
  title       String? @db.VarChar(70)
  description String? @db.VarChar(700)

  authorId String
  author   UserProfile @relation(fields: [authorId], references: [id], onDelete: Cascade)

  chat       Chat?
  interested Interested[]
  jobs       Job[]
  comments   Comment[]
  views      View[]
  likes      Like[]
  images     Image[]
  links      Link[]
  tags       Tag[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([authorId])
  Project Project[]
}

model Image {
  id     String @id @default(uuid())
  src    String @db.VarChar(2048)
  alt    String @db.VarChar(255)
  width  Int
  height Int

  // relações opcionais: uma imagem pode pertencer a uma Idea ou a um Project
  ideaId    String?
  idea      Idea?    @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([ideaId])
  @@index([projectId])
}

model Job {
  id   String @id @default(uuid())
  name String @db.VarChar(100)

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  // skills que esse job prioriza
  skills JobSkill[]

  @@index([ideaId])
}

model Skill {
  id   String @id @default(uuid())
  name String @db.VarChar(100) @unique

  jobs       JobSkill[]
  userSkills UserSkill[]
}

model UserSkill {
  userProfileId String
  skillId       String

  userProfile UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  skill       Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)

  level Int?

  @@id([userProfileId, skillId])
  @@index([skillId])
}

model Experience {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(200) // nome do cargo
  company     String?  @db.VarChar(200)
  description String?  @db.VarChar(1000)
  startDate   DateTime
  endDate     DateTime?

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([userProfileId])
}

model Project {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(1000)
  visibility  ProjectVisibility @default(PUBLIC)

  ideaId String @unique
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  members ProjectMember[]
  images  Image[]   // imagens onde image.projectId = this.id

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([ideaId])
}

model ProjectMember {
  userProfileId String
  projectId     String

  userProfile UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  role String? @db.VarChar(100) // ex: "Lead Frontend", "Designer", etc.

  @@id([userProfileId, projectId])
  @@index([projectId])
}


model JobSkill {
  jobId   String
  skillId String

  job   Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([jobId, skillId])
  @@index([skillId])
}

model Chat {
  id       String @id @default(uuid())

  ideaId String @unique
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  users    UserInChat[]
  messages Message[]

  @@index([ideaId])
}

model UserInChat {
  userId String
  chatId String

  user UserProfile @relation(fields: [userId], references: [id])
  chat Chat        @relation(fields: [chatId], references: [id])

  @@id([userId, chatId])
  @@index([chatId])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.VarChar(2000)
  createdAt DateTime @default(now())

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  senderId String
  sender   UserProfile @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([senderId])
}

model Interested {
  id       String   @id @default(uuid())
  approved Boolean?

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, ideaId])
  @@index([ideaId])
}

model Tag {
  id   String @id @default(uuid())
  name String @db.VarChar(50)

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  @@index([ideaId])
}

model Link {
  id  String @id @default(uuid())
  url String @db.VarChar(700)

  ideaId        String?
  idea          Idea?        @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  userProfileId String?
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])

  @@index([ideaId])
  @@index([userProfileId])
}

model Comment {
  id      String @id @default(uuid())
  content String @db.VarChar(200)

  likes Like[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  parentCommentId String?
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies         Comment[] @relation("CommentReplies")

  authorId String
  author   UserProfile @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([ideaId])
  @@index([authorId])
  @@index([parentCommentId])
}

model View {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, ideaId])
  @@index([ideaId])
  @@index([userProfileId])
}

model Like {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())

  ideaId String?
  idea   Idea?   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, ideaId])
  @@unique([userProfileId, commentId])
  @@index([ideaId])
  @@index([commentId])
  @@index([userProfileId])
}

model RefreshToken {
  id    String @id @default(uuid())
  token String

  user User?
}
