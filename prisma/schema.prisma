generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("PG_DB_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(uuid())
  username      String    @db.VarChar(50)
  email         String    @unique @db.VarChar(320)
  password      String    @db.VarChar(60)
  verified      Boolean   @default(false)
  loginAttempts Int       @default(0)
  blockedUntil  DateTime?

  userProfileId String      @unique
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  refreshTokenId String?       @unique
  refreshToken   RefreshToken? @relation(fields: [refreshTokenId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserProfile {
  id          String  @id @default(uuid())
  displayName String? @db.VarChar(300)
  icon        String? @db.VarChar(2048)

  user    User?
  comment Comment[]
  posts   Post[]
  viewed  View[]
  liked   Like[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Post {
  id      String  @id @default(uuid())
  title   String? @db.VarChar(70)
  content String? @db.VarChar(700)

  authorId String
  author   UserProfile @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comment Comment[]
  views   View[]
  likes   Like[]
  images  Image[]
  links   Link[]
  tags    Tag[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([authorId])
}

model Image {
  id     String @id @default(uuid())
  src    String @db.VarChar(2048)
  alt    String @db.VarChar(255)
  width  Int
  height Int

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Tag {
  id   String @id @default(uuid())
  name String @db.VarChar(50)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Link {
  id  String @id @default(uuid())
  url String @db.VarChar(50)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Comment {
  id      String @id @default(uuid())
  content String @db.VarChar(200)

  likes Like[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentCommentId String?
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies         Comment[] @relation("CommentReplies")

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, postId])
  @@unique([userProfileId, id])
  @@index([id])
  @@index([postId])
  @@index([userProfileId])
  @@index([parentCommentId])
}

model View {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, postId])
  @@index([postId])
  @@index([userProfileId])
}

model Like {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, postId])
  @@unique([userProfileId, commentId])
  @@index([postId])
  @@index([commentId])
  @@index([userProfileId])
}

model RefreshToken {
  id    String @id @default(uuid())
  token String

  user   User?
}
