generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("PG_DB_URL")
  relationMode = "prisma"
}

enum EventFrequency {
  DAILY
  MONTHLY
  WEEKLY
  YEARLY
}

model User {
  id            String    @id @default(uuid())
  username      String    @db.VarChar(50)
  email         String    @unique @db.VarChar(320)
  password      String    @db.VarChar(60)
  verified      Boolean   @default(false)
  loginAttempts Int       @default(0)
  blockedUntil  DateTime?

  userCodeId String   @unique
  userCode   UserCode @relation(fields: [userCodeId], references: [id], onDelete: Cascade)

  userProfileId String      @unique
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  refreshTokenId String?       @unique
  refreshToken   RefreshToken? @relation(fields: [refreshTokenId], references: [id], onDelete: Cascade)

  oauthAccounts UserOAuth[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserCode {
  id         String   @id @default(uuid())
  code       String   @db.VarChar(6)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User?
}

model UserOAuth {
  id       String @id @default(uuid())
  provider String

  email  String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())

  @@unique([provider, email])
  @@index([userId])
}

model UserProfile {
  id              String  @id @default(uuid())
  displayName     String? @db.VarChar(300)
  icon            String? @db.VarChar(2048)
  autobiography   String? @db.VarChar(500)
  backgroundImage String? @db.VarChar(2048)

  user      User?
  chats     UserInChat[]
  interests Interested[]
  comment   Comment[]
  ideas     Idea[]
  viewed    View[]
  liked     Like[]
  links     Link[]
  teams     UserTeam[]
  following Follow[]     @relation("UserFollows")
  followers Follow[]     @relation("FollowingUser")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Team {
  id   String @id @default(uuid())
  name String

  followers Follow[]   @relation("FollowingTeam")
  members   UserTeam[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserTeam {
  userId String
  teamId String

  user UserProfile @relation(fields: [userId], references: [id])
  team Team        @relation(fields: [teamId], references: [id])

  @@id([userId, teamId])
  @@index([teamId])
}

model Follow {
  id String @id @default(uuid())

  followerUserId  String
  followingUserId String?
  followingTeamId String?

  followerUser  UserProfile  @relation("UserFollows", fields: [followerUserId], references: [id])
  followingUser UserProfile? @relation("FollowingUser", fields: [followingUserId], references: [id])
  followingTeam Team?        @relation("FollowingTeam", fields: [followingTeamId], references: [id])

  created_at DateTime @default(now())

  @@unique([followerUserId, followingUserId])
  @@unique([followerUserId, followingTeamId])
  @@index([followingUserId])
  @@index([followingTeamId])
}

model Idea {
  id      String  @id @default(uuid())
  title   String? @db.VarChar(70)
  content String? @db.VarChar(700)

  authorId String
  author   UserProfile @relation(fields: [authorId], references: [id], onDelete: Cascade)

  chat       Chat?
  interested Interested[]
  jobs       Job[]
  comments   Comment[]
  views      View[]
  likes      Like[]
  images     Image[]
  links      Link[]
  tags       Tag[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([authorId])
}

model Image {
  id     String @id @default(uuid())
  src    String @db.VarChar(2048)
  alt    String @db.VarChar(255)
  width  Int
  height Int

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  @@index([ideaId])
}

model Chat {
  id String @id @default(uuid())

  ideaId String @unique
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  users UserInChat[]

  @@index([ideaId])
}

model UserInChat {
  userId String
  chatId String

  user UserProfile @relation(fields: [userId], references: [id])
  chat Chat        @relation(fields: [chatId], references: [id])

  @@id([userId, chatId])
  @@index([chatId])
}

model Interested {
  id       String  @id @default(uuid())
  approved Boolean

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  userProfileId String      @unique
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@index([ideaId])
}

model Job {
  id   String @id @default(uuid())
  name String @db.VarChar(100)

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  @@index([ideaId])
}

model Tag {
  id   String @id @default(uuid())
  name String @db.VarChar(50)

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  @@index([ideaId])
}

model Link {
  id  String @id @default(uuid())
  url String @db.VarChar(700)

  ideaId        String?
  idea          Idea?        @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  userProfileId String?
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])

  @@index([ideaId])
  @@index([userProfileId])
}

model Comment {
  id      String @id @default(uuid())
  content String @db.VarChar(200)

  likes Like[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  parentCommentId String?
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies         Comment[] @relation("CommentReplies")

  authorId String
  author   UserProfile @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([ideaId])
  @@index([authorId])
  @@index([parentCommentId])
}

model View {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, ideaId])
  @@index([ideaId])
  @@index([userProfileId])
}

model Like {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())

  ideaId String?
  idea   Idea?   @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, ideaId])
  @@unique([userProfileId, commentId])
  @@index([ideaId])
  @@index([commentId])
  @@index([userProfileId])
}

model RefreshToken {
  id    String @id @default(uuid())
  token String

  user User?
}
