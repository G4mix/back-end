{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"RecordViewResponse": {
				"properties": {
					"viewed": {
						"type": "boolean"
					},
					"viewCount": {
						"type": "number",
						"format": "double"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"viewed",
					"viewCount",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ErrorResponse": {
				"description": "Interface para respostas de erro padronizadas",
				"properties": {
					"message": {
						"type": "string"
					},
					"code": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"message",
					"code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RecordViewInput": {
				"properties": {
					"ideas": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"ideas"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateUserOutput": {
				"properties": {
					"user": {
						"properties": {
							"updated_at": {
								"type": "string"
							},
							"created_at": {
								"type": "string"
							},
							"userProfile": {
								"properties": {
									"followersCount": {
										"type": "number",
										"format": "double"
									},
									"followingCount": {
										"type": "number",
										"format": "double"
									},
									"links": {
										"items": {
											"properties": {
												"url": {
													"type": "string"
												},
												"id": {
													"type": "string"
												}
											},
											"required": [
												"url",
												"id"
											],
											"type": "object"
										},
										"type": "array"
									},
									"backgroundImage": {
										"type": "string",
										"nullable": true
									},
									"icon": {
										"type": "string",
										"nullable": true
									},
									"autobiography": {
										"type": "string",
										"nullable": true
									},
									"displayName": {
										"type": "string",
										"nullable": true
									},
									"id": {
										"type": "string"
									}
								},
								"required": [
									"followersCount",
									"followingCount",
									"links",
									"backgroundImage",
									"icon",
									"autobiography",
									"displayName",
									"id"
								],
								"type": "object",
								"nullable": true
							},
							"verified": {
								"type": "boolean"
							},
							"email": {
								"type": "string"
							},
							"username": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"updated_at",
							"created_at",
							"userProfile",
							"verified",
							"email",
							"username",
							"id"
						],
						"type": "object"
					}
				},
				"required": [
					"user"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ToggleLikeResponse": {
				"properties": {
					"liked": {
						"type": "boolean"
					},
					"likeCount": {
						"type": "number",
						"format": "double"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"liked",
					"likeCount",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ToggleLikeInput": {
				"properties": {
					"ideaId": {
						"type": "string"
					},
					"commentId": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UpdateIdeaResponse": {
				"properties": {
					"idea": {
						"properties": {
							"updated_at": {
								"type": "string"
							},
							"created_at": {
								"type": "string"
							},
							"links": {
								"items": {
									"properties": {
										"url": {
											"type": "string"
										},
										"id": {
											"type": "string"
										}
									},
									"required": [
										"url",
										"id"
									],
									"type": "object"
								},
								"type": "array"
							},
							"images": {
								"items": {
									"properties": {
										"height": {
											"type": "number",
											"format": "double"
										},
										"width": {
											"type": "number",
											"format": "double"
										},
										"alt": {
											"type": "string"
										},
										"src": {
											"type": "string"
										},
										"id": {
											"type": "string"
										}
									},
									"required": [
										"height",
										"width",
										"alt",
										"src",
										"id"
									],
									"type": "object"
								},
								"type": "array"
							},
							"tags": {
								"items": {
									"properties": {
										"name": {
											"type": "string"
										},
										"id": {
											"type": "string"
										}
									},
									"required": [
										"name",
										"id"
									],
									"type": "object"
								},
								"type": "array"
							},
							"authorId": {
								"type": "string"
							},
							"description": {
								"type": "string",
								"nullable": true
							},
							"title": {
								"type": "string",
								"nullable": true
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"updated_at",
							"created_at",
							"authorId",
							"description",
							"title",
							"id"
						],
						"type": "object"
					}
				},
				"required": [
					"idea"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Express.Multer.File": {
				"description": "Object containing file metadata and access information.",
				"properties": {
					"fieldname": {
						"type": "string",
						"description": "Name of the form field associated with this file."
					},
					"originalname": {
						"type": "string",
						"description": "Name of the file on the uploader's computer."
					},
					"encoding": {
						"type": "string",
						"description": "Value of the `Content-Transfer-Encoding` header for this file.",
						"deprecated": true
					},
					"mimetype": {
						"type": "string",
						"description": "Value of the `Content-Type` header for this file."
					},
					"size": {
						"type": "number",
						"format": "double",
						"description": "Size of the file in bytes."
					},
					"stream": {
						"type": "string",
						"format": "byte",
						"description": "A readable stream of this file. Only available to the `_handleFile`\ncallback for custom `StorageEngine`s."
					},
					"destination": {
						"type": "string",
						"description": "`DiskStorage` only: Directory to which this file has been uploaded."
					},
					"filename": {
						"type": "string",
						"description": "`DiskStorage` only: Name of this file within `destination`."
					},
					"path": {
						"type": "string",
						"description": "`DiskStorage` only: Full path to the uploaded file."
					},
					"buffer": {
						"type": "string",
						"format": "byte",
						"description": "`MemoryStorage` only: A Buffer containing the entire file."
					}
				},
				"required": [
					"fieldname",
					"originalname",
					"encoding",
					"mimetype",
					"size",
					"stream",
					"destination",
					"filename",
					"path",
					"buffer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateIdeaInput": {
				"properties": {
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"images": {
						"items": {
							"$ref": "#/components/schemas/Express.Multer.File"
						},
						"type": "array"
					},
					"links": {
						"items": {
							"properties": {
								"url": {
									"type": "string"
								}
							},
							"required": [
								"url"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"GetIdeaByIdResponse": {
				"properties": {
					"idea": {
						"properties": {
							"_count": {
								"properties": {
									"comments": {
										"type": "number",
										"format": "double"
									},
									"views": {
										"type": "number",
										"format": "double"
									},
									"likes": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"comments",
									"views",
									"likes"
								],
								"type": "object"
							},
							"updated_at": {
								"type": "string"
							},
							"created_at": {
								"type": "string"
							},
							"author": {
								"properties": {
									"icon": {
										"type": "string",
										"nullable": true
									},
									"displayName": {
										"type": "string",
										"nullable": true
									},
									"id": {
										"type": "string"
									}
								},
								"required": [
									"id"
								],
								"type": "object"
							},
							"authorId": {
								"type": "string"
							},
							"description": {
								"type": "string",
								"nullable": true
							},
							"title": {
								"type": "string",
								"nullable": true
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"updated_at",
							"created_at",
							"author",
							"authorId",
							"description",
							"title",
							"id"
						],
						"type": "object"
					}
				},
				"required": [
					"idea"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateIdeaResponse": {
				"properties": {
					"idea": {
						"properties": {
							"updated_at": {
								"type": "string"
							},
							"created_at": {
								"type": "string"
							},
							"links": {
								"items": {
									"properties": {
										"url": {
											"type": "string"
										},
										"id": {
											"type": "string"
										}
									},
									"required": [
										"url",
										"id"
									],
									"type": "object"
								},
								"type": "array"
							},
							"images": {
								"items": {
									"properties": {
										"height": {
											"type": "number",
											"format": "double"
										},
										"width": {
											"type": "number",
											"format": "double"
										},
										"alt": {
											"type": "string"
										},
										"src": {
											"type": "string"
										},
										"id": {
											"type": "string"
										}
									},
									"required": [
										"height",
										"width",
										"alt",
										"src",
										"id"
									],
									"type": "object"
								},
								"type": "array"
							},
							"tags": {
								"items": {
									"properties": {
										"name": {
											"type": "string"
										},
										"id": {
											"type": "string"
										}
									},
									"required": [
										"name",
										"id"
									],
									"type": "object"
								},
								"type": "array"
							},
							"authorId": {
								"type": "string"
							},
							"description": {
								"type": "string",
								"nullable": true
							},
							"title": {
								"type": "string",
								"nullable": true
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"updated_at",
							"created_at",
							"authorId",
							"description",
							"title",
							"id"
						],
						"type": "object"
					}
				},
				"required": [
					"idea"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateIdeaInput": {
				"properties": {
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"images": {
						"items": {
							"$ref": "#/components/schemas/Express.Multer.File"
						},
						"type": "array"
					},
					"links": {
						"items": {
							"properties": {
								"url": {
									"type": "string"
								}
							},
							"required": [
								"url"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"title",
					"description"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ToggleFollowResponse": {
				"properties": {
					"following": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"following",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ToggleFollowInput": {
				"properties": {
					"followingId": {
						"type": "string"
					}
				},
				"required": [
					"followingId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FollowingResponse": {
				"properties": {
					"id": {
						"type": "string"
					},
					"followingUser": {
						"properties": {
							"username": {
								"type": "string"
							},
							"icon": {
								"type": "string",
								"nullable": true
							},
							"displayName": {
								"type": "string",
								"nullable": true
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"id"
						],
						"type": "object"
					},
					"created_at": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"followingUser",
					"created_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetFollowingResponse": {
				"properties": {
					"following": {
						"items": {
							"$ref": "#/components/schemas/FollowingResponse"
						},
						"type": "array"
					},
					"pagination": {
						"properties": {
							"hasPrev": {
								"type": "boolean"
							},
							"hasNext": {
								"type": "boolean"
							},
							"totalPages": {
								"type": "number",
								"format": "double"
							},
							"total": {
								"type": "number",
								"format": "double"
							},
							"limit": {
								"type": "number",
								"format": "double"
							},
							"page": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"hasPrev",
							"hasNext",
							"totalPages",
							"total",
							"limit",
							"page"
						],
						"type": "object"
					}
				},
				"required": [
					"following",
					"pagination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FollowerResponse": {
				"properties": {
					"id": {
						"type": "string"
					},
					"followerUser": {
						"properties": {
							"username": {
								"type": "string"
							},
							"icon": {
								"type": "string",
								"nullable": true
							},
							"displayName": {
								"type": "string",
								"nullable": true
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"id"
						],
						"type": "object"
					},
					"created_at": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"followerUser",
					"created_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetFollowersResponse": {
				"properties": {
					"followers": {
						"items": {
							"$ref": "#/components/schemas/FollowerResponse"
						},
						"type": "array"
					},
					"pagination": {
						"properties": {
							"hasPrev": {
								"type": "boolean"
							},
							"hasNext": {
								"type": "boolean"
							},
							"totalPages": {
								"type": "number",
								"format": "double"
							},
							"total": {
								"type": "number",
								"format": "double"
							},
							"limit": {
								"type": "number",
								"format": "double"
							},
							"page": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"hasPrev",
							"hasNext",
							"totalPages",
							"total",
							"limit",
							"page"
						],
						"type": "object"
					}
				},
				"required": [
					"followers",
					"pagination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CommentResponse": {
				"properties": {
					"id": {
						"type": "string"
					},
					"content": {
						"type": "string"
					},
					"ideaId": {
						"type": "string"
					},
					"parentCommentId": {
						"type": "string",
						"nullable": true
					},
					"authorId": {
						"type": "string"
					},
					"author": {
						"properties": {
							"icon": {
								"type": "string",
								"nullable": true
							},
							"displayName": {
								"type": "string",
								"nullable": true
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"id"
						],
						"type": "object"
					},
					"created_at": {
						"type": "string"
					},
					"updated_at": {
						"type": "string"
					},
					"_count": {
						"properties": {
							"replies": {
								"type": "number",
								"format": "double"
							},
							"likes": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"replies",
							"likes"
						],
						"type": "object"
					}
				},
				"required": [
					"id",
					"content",
					"ideaId",
					"authorId",
					"author",
					"created_at",
					"updated_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetCommentsResponse": {
				"properties": {
					"comments": {
						"items": {
							"$ref": "#/components/schemas/CommentResponse"
						},
						"type": "array"
					},
					"pagination": {
						"properties": {
							"hasPrev": {
								"type": "boolean"
							},
							"hasNext": {
								"type": "boolean"
							},
							"totalPages": {
								"type": "number",
								"format": "double"
							},
							"total": {
								"type": "number",
								"format": "double"
							},
							"limit": {
								"type": "number",
								"format": "double"
							},
							"page": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"hasPrev",
							"hasNext",
							"totalPages",
							"total",
							"limit",
							"page"
						],
						"type": "object"
					}
				},
				"required": [
					"comments",
					"pagination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateCommentInput": {
				"properties": {
					"ideaId": {
						"type": "string"
					},
					"content": {
						"type": "string"
					},
					"parentCommentId": {
						"type": "string"
					}
				},
				"required": [
					"ideaId",
					"content"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SigninOutput": {
				"properties": {
					"accessToken": {
						"type": "string"
					},
					"refreshToken": {
						"type": "string"
					},
					"user": {
						"properties": {
							"updated_at": {
								"type": "string"
							},
							"created_at": {
								"type": "string"
							},
							"userProfile": {
								"properties": {
									"followersCount": {
										"type": "number",
										"format": "double"
									},
									"followingCount": {
										"type": "number",
										"format": "double"
									},
									"links": {
										"items": {
											"properties": {
												"url": {
													"type": "string"
												},
												"id": {
													"type": "string"
												}
											},
											"required": [
												"url",
												"id"
											],
											"type": "object"
										},
										"type": "array"
									},
									"backgroundImage": {
										"type": "string",
										"nullable": true
									},
									"icon": {
										"type": "string",
										"nullable": true
									},
									"autobiography": {
										"type": "string",
										"nullable": true
									},
									"displayName": {
										"type": "string",
										"nullable": true
									},
									"id": {
										"type": "string"
									}
								},
								"required": [
									"followersCount",
									"followingCount",
									"links",
									"backgroundImage",
									"icon",
									"autobiography",
									"displayName",
									"id"
								],
								"type": "object",
								"nullable": true
							},
							"verified": {
								"type": "boolean"
							},
							"email": {
								"type": "string"
							},
							"username": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"updated_at",
							"created_at",
							"userProfile",
							"verified",
							"email",
							"username",
							"id"
						],
						"type": "object"
					}
				},
				"required": [
					"accessToken",
					"refreshToken",
					"user"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateUserInput": {
				"properties": {
					"username": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"username",
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SigninInput": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer"
			}
		}
	},
	"info": {
		"title": "",
		"contact": {}
	},
	"paths": {
		"/v1/views/record": {
			"post": {
				"operationId": "RecordView",
				"responses": {
					"200": {
						"description": "View recorded successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/RecordViewResponse"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Record a view for idea or comment\n\nThis endpoint allows authenticated users to record a view for ideas or comments.\nViews are tracked to provide analytics and engagement metrics. The system\nprevents duplicate views from the same user within a certain time period.\n\nView Recording Process:\n- Validates user authentication\n- Checks if user has already viewed the content recently\n- Records new view if not duplicate\n- Updates view count for the content\n- Returns current view status and count",
				"tags": [
					"Views"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- Object containing ideaId and optional commentId",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RecordViewInput",
								"description": "- Object containing ideaId and optional commentId"
							}
						}
					}
				}
			}
		},
		"/v1/user": {
			"patch": {
				"operationId": "UpdateUser",
				"responses": {
					"200": {
						"description": "User updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/UpdateUserOutput"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Update authenticated user's profile information\n\nThis endpoint allows authenticated users to update their profile information\nincluding basic details and profile images. It supports partial updates,\nfile uploads for profile images, and comprehensive validation.\n\nUpdate Features:\n- Update basic profile information (displayName, autobiography)\n- Upload and manage profile icon (with size and type validation)\n- Upload and manage background image\n- Automatic file cleanup for replaced images\n- Secure file storage via S3Gateway\n- Comprehensive input validation",
				"tags": [
					"User Management"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": false,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"username": {
										"type": "string"
									},
									"email": {
										"type": "string"
									},
									"password": {
										"type": "string"
									},
									"displayName": {
										"type": "string"
									},
									"autobiography": {
										"type": "string"
									},
									"links": {
										"type": "string"
									},
									"icon": {
										"type": "string",
										"format": "binary"
									},
									"backgroundImage": {
										"type": "string",
										"format": "binary"
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetUsers",
				"responses": {
					"200": {
						"description": "Users retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"pagination": {
											"properties": {
												"total": {
													"type": "number",
													"format": "double"
												},
												"limit": {
													"type": "number",
													"format": "double"
												},
												"page": {
													"type": "number",
													"format": "double"
												}
											},
											"required": [
												"total",
												"limit",
												"page"
											],
											"type": "object"
										},
										"users": {
											"items": {},
											"type": "array"
										}
									},
									"required": [
										"pagination",
										"users"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieve paginated list of users with search functionality\n\nThis endpoint provides a paginated list of all users in the system with\noptional search functionality. It's useful for user discovery, admin\nmanagement, and general user browsing features.\n\nFeatures:\n- Pagination with configurable page size\n- Search functionality across user fields\n- Serialized user data with profile information\n- Comprehensive pagination metadata\n- Performance optimized queries",
				"tags": [
					"User Management"
				],
				"security": [],
				"parameters": [
					{
						"description": "- Page number for pagination (default: 0)",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 0,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- Number of users per page (default: 10)",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"default": 10,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- Optional search term to filter users",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteUser",
				"responses": {
					"200": {
						"description": "User deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ErrorResponse"
										},
										{
											"properties": {
												"message": {
													"type": "string"
												}
											},
											"required": [
												"message"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Permanently delete authenticated user's account and associated data\n\nThis endpoint allows authenticated users to permanently delete their account\nand all associated data. It performs comprehensive cleanup including user\nfiles, database records, and external service data. This action is irreversible.\n\nDeletion Process:\n- Validates user authentication and ownership\n- Retrieves user file information (profile images, etc.)\n- Deletes user files from cloud storage (S3)\n- Removes all user data from database\n- Cleans up related records and associations\n- Comprehensive error handling and rollback\n\nSecurity Features:\n- JWT token validation required\n- User can only delete their own account\n- Comprehensive data cleanup\n- Secure file deletion from cloud storage",
				"tags": [
					"User Management"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/v1/user/link-new-oauth-provider/{provider}": {
			"post": {
				"operationId": "LinkNewOAuthProvider",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"success": {
													"type": "boolean"
												}
											},
											"required": [
												"success"
											],
											"type": "object"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Link additional OAuth provider to existing account\n\nThis endpoint allows authenticated users to link additional social providers\n(Google, LinkedIn, GitHub) to their existing account. This enables users to\nsign in with multiple social accounts using the same application account.\n\nProvider Linking Process:\n- Validates user authentication via JWT token\n- Validates social provider token via AuthGateway\n- Retrieves user profile from social provider\n- Checks if provider is already linked to another account\n- Links provider to current user account",
				"tags": [
					"User Management"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "- Social provider name (google, linkedin, github)",
						"in": "path",
						"name": "provider",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"google",
								"linkedin",
								"github"
							]
						}
					}
				],
				"requestBody": {
					"description": "- Object containing the social provider token",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"token": {
										"type": "string"
									}
								},
								"required": [
									"token"
								],
								"type": "object",
								"description": "- Object containing the social provider token"
							}
						}
					}
				}
			}
		},
		"/v1/user/{userId}": {
			"get": {
				"operationId": "GetUserById",
				"responses": {
					"200": {
						"description": "User retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Retrieve specific user by ID with complete profile information\n\nThis endpoint retrieves detailed information about a specific user by their ID.\nIt returns complete user data including profile information, links, and\nfollower/following counts. Useful for user profiles, user details pages,\nand user lookup functionality.\n\nFeatures:\n- Complete user profile information\n- Social links and connections data\n- Follower and following counts\n- Serialized user data format\n- Proper error handling for non-existent users",
				"tags": [
					"User Management"
				],
				"security": [],
				"parameters": [
					{
						"description": "- Unique identifier of the user to retrieve",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/likes/toggle": {
			"post": {
				"operationId": "ToggleLike",
				"responses": {
					"200": {
						"description": "Like toggled successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ToggleLikeResponse"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Toggle like on idea or comment\n\nThis endpoint allows authenticated users to like or unlike ideas and comments.\nIf the user hasn't liked the content before, it will create a like. If they\nhave already liked it, it will remove the like (toggle behavior).\n\nLike Toggle Process:\n- Validates user authentication\n- Checks if user has already liked the content\n- Creates like if not exists, removes if exists\n- Updates like count for the content\n- Returns current like status and count",
				"tags": [
					"Likes"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- Object containing ideaId and optional commentId",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ToggleLikeInput",
								"description": "- Object containing ideaId and optional commentId"
							}
						}
					}
				}
			}
		},
		"/v1/idea/{id}": {
			"patch": {
				"operationId": "UpdateIdea",
				"responses": {
					"200": {
						"description": "Idea updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/UpdateIdeaResponse"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Update an existing idea\n\nThis endpoint allows authenticated users to update their own ideas.\nOnly the author of the idea can update it.",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the idea to update.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The request body containing the updated idea details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateIdeaInput",
								"description": "The request body containing the updated idea details."
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetIdeaById",
				"responses": {
					"200": {
						"description": "Idea retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/GetIdeaByIdResponse"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get a specific idea by ID\n\nThis endpoint allows authenticated users to retrieve a specific idea by its ID.\nThe response includes the idea details, author information, and engagement metrics.",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the idea to retrieve.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteIdea",
				"responses": {
					"200": {
						"description": "Idea deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Delete an existing idea\n\nThis endpoint allows authenticated users to delete their own ideas.\nOnly the author of the idea can delete it. This action is irreversible.",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the idea to delete.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/idea": {
			"get": {
				"operationId": "GetIdeas",
				"responses": {
					"200": {
						"description": "Ideas retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get list of ideas with filtering and pagination\n\nThis endpoint allows authenticated users to retrieve a paginated list of ideas\nwith various filtering options. Users can search by title/description, filter\nby author, tags, and sort by different criteria.\n\nIdeas Retrieval Process:\n- Validates query parameters (pagination, filters, sorting)\n- Applies search filters if provided\n- Retrieves ideas from database with pagination\n- Includes author information and engagement metrics\n- Returns paginated results with metadata",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "authorId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tags",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"created_at",
								"updated_at",
								"title"
							]
						}
					},
					{
						"in": "query",
						"name": "sortOrder",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						}
					}
				]
			},
			"post": {
				"operationId": "CreateIdea",
				"responses": {
					"201": {
						"description": "Idea created successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/CreateIdeaResponse"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Create a new idea\n\nThis endpoint allows authenticated users to create new ideas. The idea will be\nassociated with the authenticated user's profile and will be visible to other\nusers based on the platform's visibility rules.\n\nIdea Creation Process:\n- Validates input data (title, description, summary, tags)\n- Associates idea with authenticated user's profile\n- Creates idea record in database\n- Returns created idea with generated ID and timestamps",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- Object containing idea data (title, description, summary, tags)",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateIdeaInput",
								"description": "- Object containing idea data (title, description, summary, tags)"
							}
						}
					}
				}
			}
		},
		"/v1/follow/toggle": {
			"post": {
				"operationId": "ToggleFollow",
				"responses": {
					"200": {
						"description": "Follow toggled successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ToggleFollowResponse"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Toggle follow relationship with user\n\nThis endpoint allows authenticated users to follow or unfollow other users.\nIf the user isn't following the target, it will create a follow relationship.\nIf they are already following, it will remove the relationship.\n\nFollow Toggle Process:\n- Validates user authentication\n- Checks if user is trying to follow themselves (not allowed)\n- Validates that target user exists\n- Creates or removes follow relationship\n- Returns current follow status",
				"tags": [
					"Follows"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- Object containing followingId (user profile ID)",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ToggleFollowInput",
								"description": "- Object containing followingId (user profile ID)"
							}
						}
					}
				}
			}
		},
		"/v1/follow/following/{userId}": {
			"get": {
				"operationId": "GetFollowing",
				"responses": {
					"200": {
						"description": "Following retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/GetFollowingResponse"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get who a user is following\n\nThis endpoint allows authenticated users to retrieve a paginated list of users\nthat a specific user profile is following.",
				"tags": [
					"Follows"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "- The user profile ID to get following for",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Page number (0-based)",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- Number of items per page",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v1/follow/followers/{userId}": {
			"get": {
				"operationId": "GetFollowers",
				"responses": {
					"200": {
						"description": "Followers retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/GetFollowersResponse"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get followers of a user\n\nThis endpoint allows authenticated users to retrieve a paginated list of followers\nfor a specific user profile. Users can see who is following them.",
				"tags": [
					"Follows"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "- The user profile ID to get followers for",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Page number (0-based)",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- Number of items per page",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v1/comment": {
			"get": {
				"operationId": "GetComments",
				"responses": {
					"200": {
						"description": "Comments retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/GetCommentsResponse"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get comments for an idea with pagination\n\nThis endpoint allows authenticated users to retrieve comments for a specific idea.\nComments are returned in a paginated format and can be filtered by parent comment.",
				"tags": [
					"Comment"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the idea to get comments for.",
						"in": "query",
						"name": "ideaId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Optional page number for pagination (default: 1).",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Optional number of items per page (default: 10, max: 100).",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Optional ID of parent comment to get replies (for nested comments).",
						"in": "query",
						"name": "parentCommentId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateComment",
				"responses": {
					"201": {
						"description": "Comment created successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Create a new comment on an idea\n\nThis endpoint allows authenticated users to create comments on ideas or reply\nto existing comments. Comments support nested replies through parentCommentId.\n\nComment Creation Process:\n- Validates user authentication\n- Validates that the target idea exists\n- Validates parent comment if replying to a comment\n- Creates comment in database with author information\n- Returns created comment with engagement metrics",
				"tags": [
					"Comment"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- Object containing ideaId, content, and optional parentCommentId",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateCommentInput",
								"description": "- Object containing ideaId, content, and optional parentCommentId"
							}
						}
					}
				}
			}
		},
		"/v1/auth/verify-email-code": {
			"post": {
				"operationId": "VerifyEmailCode",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"accessToken": {
													"type": "string"
												}
											},
											"required": [
												"accessToken"
											],
											"type": "object"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Verify recovery code and generate temporary access token\n\nThis endpoint verifies the recovery code sent to the user's email and generates\na temporary access token that allows the user to change their password. The\ncode must be used within 10 minutes of generation.\n\nVerification Process:\n- Validates user exists by email\n- Checks code expiration (10 minutes)\n- Verifies provided code matches stored code\n- Generates temporary access token for password change\n- Clears recovery code from user account",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- Object containing email and verification code",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"email": {
										"type": "string"
									},
									"code": {
										"type": "string"
									}
								},
								"required": [
									"email",
									"code"
								],
								"type": "object",
								"description": "- Object containing email and verification code"
							}
						}
					}
				}
			}
		},
		"/v1/auth/social-login/{provider}": {
			"post": {
				"operationId": "SocialLogin",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/SigninOutput"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Authenticate user with social provider token\n\nThis endpoint authenticates users using tokens obtained from social providers\n(Google, LinkedIn, GitHub). It validates the social token, retrieves user profile\ninformation, and either signs in existing users or creates new accounts.\n\nSocial Authentication Process:\n- Validates social provider token via AuthGateway\n- Retrieves user profile from social provider\n- Checks if user already exists by email\n- Creates new account or links to existing account\n- Generates application authentication tokens\n- Updates refresh token in database",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [
					{
						"description": "- Social provider name (google, linkedin, github)",
						"in": "path",
						"name": "provider",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"google",
								"linkedin",
								"github"
							]
						}
					}
				],
				"requestBody": {
					"description": "- Object containing the social provider token",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"token": {
										"type": "string"
									}
								},
								"required": [
									"token"
								],
								"type": "object",
								"description": "- Object containing the social provider token"
							}
						}
					}
				}
			}
		},
		"/v1/auth/callback/{provider}": {
			"get": {
				"operationId": "CallbackSocialLoginGet",
				"responses": {
					"200": {
						"description": ""
					}
				},
				"description": "Handle OAuth callback from social providers\n\nThis endpoint processes the OAuth callback from social login providers (Google,\nLinkedIn, GitHub) after the user has authenticated with the external service.\nIt exchanges the authorization code for access tokens and completes the login process.\n\nOAuth Callback Process:\n- Receives authorization code from provider\n- Exchanges code for access tokens via AuthGateway\n- Retrieves user profile information\n- Creates or updates user account\n- Generates application authentication tokens",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [
					{
						"description": "- Social provider name (google, linkedin, github)",
						"in": "path",
						"name": "provider",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"google",
								"linkedin",
								"github"
							]
						}
					},
					{
						"description": "- Authorization code from OAuth provider",
						"in": "query",
						"name": "code",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- State parameter for OAuth security",
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/auth/signup": {
			"post": {
				"operationId": "Signup",
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/SigninOutput"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Register a new user account\n\nThis endpoint creates a new user account in the system. It performs comprehensive\nvalidation including email uniqueness check, email identity verification through AWS SES,\nand secure password hashing. Upon successful registration, the user is automatically\nsigned in with generated access and refresh tokens.\n\nRegistration Process:\n- Validates email uniqueness\n- Verifies email identity through AWS SES\n- Hashes password with bcrypt\n- Creates user profile with default settings\n- Generates authentication tokens\n- Updates refresh token in database",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- User registration data containing email, password, and username",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateUserInput",
								"description": "- User registration data containing email, password, and username"
							}
						}
					}
				}
			}
		},
		"/v1/auth/signin": {
			"post": {
				"operationId": "Signin",
				"responses": {
					"200": {
						"description": "User signed in successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/SigninOutput"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Authenticate user and generate access tokens\n\nThis endpoint authenticates a user by validating their email and password credentials.\nIt performs comprehensive security checks including email verification status,\nlogin attempt limits, and password validation. Upon successful authentication,\nit generates both access and refresh tokens for the user session.\n\nSecurity Features:\n- Email verification status check\n- Login attempt rate limiting (max 5 attempts)\n- Account temporary blocking after failed attempts\n- Password validation with bcrypt\n- Automatic email verification status update",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- Authentication credentials containing email and password",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SigninInput",
								"description": "- Authentication credentials containing email and password"
							}
						}
					}
				}
			}
		},
		"/v1/auth/send-recover-email": {
			"post": {
				"operationId": "SendRecoverEmail",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"email": {
													"type": "string"
												}
											},
											"required": [
												"email"
											],
											"type": "object"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Send password recovery email with verification code\n\nThis endpoint initiates the password recovery process by sending a verification\ncode to the user's email address. The code is generated randomly and stored\nin the user's account for verification in the next step.\n\nRecovery Process:\n- Validates user exists by email\n- Generates secure random verification code\n- Sends email via AWS SES with recovery template\n- Stores code in user account for verification\n- Code expires after 10 minutes",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- Object containing the user's email address",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"email": {
										"type": "string"
									}
								},
								"required": [
									"email"
								],
								"type": "object",
								"description": "- Object containing the user's email address"
							}
						}
					}
				}
			}
		},
		"/v1/auth/refresh-token": {
			"post": {
				"operationId": "RefreshToken",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"refreshToken": {
													"type": "string"
												},
												"accessToken": {
													"type": "string"
												}
											},
											"required": [
												"refreshToken",
												"accessToken"
											],
											"type": "object"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Refresh authentication tokens using refresh token\n\nThis endpoint allows users to obtain new access and refresh tokens using their\ncurrent refresh token. It validates the refresh token, verifies the user exists,\nand generates a new token pair. This is essential for maintaining user sessions\nwithout requiring re-authentication.\n\nToken Refresh Process:\n- Validates refresh token signature and expiration\n- Extracts user ID from token payload\n- Verifies user exists and is active\n- Generates new access and refresh tokens\n- Updates refresh token in database",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- Object containing the refresh token",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"refreshToken": {
										"type": "string"
									}
								},
								"required": [
									"refreshToken"
								],
								"type": "object",
								"description": "- Object containing the refresh token"
							}
						}
					}
				}
			}
		},
		"/v1/auth/change-password": {
			"post": {
				"operationId": "ChangePassword",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/SigninOutput"
										},
										{
											"$ref": "#/components/schemas/ErrorResponse"
										}
									]
								}
							}
						}
					}
				},
				"description": "Change user password and generate new authentication tokens\n\nThis endpoint allows authenticated users to change their current password.\nUpon successful password change, new access and refresh tokens are automatically\ngenerated and the refresh token is updated in the database.",
				"tags": [
					"Authentication"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- Object containing the new password",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"newPassword": {
										"type": "string"
									}
								},
								"required": [
									"newPassword"
								],
								"type": "object",
								"description": "- Object containing the new password"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}